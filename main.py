#вывести текст в консоль
print("hello world")

#вывести в консоль несколько значений
var1 = 'hello,' #одинарные кавычки
var2 = "world"  #двойные кавычки
var3 = "again"
print(var1, var2, var3)

#базовые типы данных Python
a = 15 #int
b = 13.141343 #float 
c = True #bool
d = "hello" #str
value = None

#вывод типа данных переменной:
print(type(a))
'''print(type(b))
print(type(c))''' #многострочный комментарий - тройные кавычки
print(type(d))
print(type(value))

'''интерполяция — способ получить сложную строку из нескольких простых 
с использованием специальных шаблонов'''
print(a,b,c)
print(a,'-',b,'-',c)
print('{} --- {} --- {}'.format(a, b, c))
print(f'first - {a}, second - {b}, third - {c}')

#input() — ввод данных(строка)
# print('введите первое число')
# inpa = input()
# print('введите второе число')
# inpb = input()
# print(inpa, ' + ', inpb, ' = ', inpa + inpb) #здесь происходит соединение двух строк

#int() - функция, которая позволяет перевести из любого типа данных в число(если это возможно)
n = 1.934
print(int(n)) #отбрасывается вся дробная часть

m = '345'
print(m * 2) # При умножении строки на число, она повторяется столько раз на какое была умножена
print(int(m) * 2) 

#str() - функция, которая позволяет перевести из любого типа данных в строку(если это возможно)
print(str(n) * 2)

# float() - функция, которая позволяет перевести из любого типа данных в вещественный(если это возможно)
print(float(n))
print(float(m))

# ввод числа и его последующее умножение
# n = int(input())
# print(n * 2)

# арифметические операции и их приоритет
"""Приоритет арифметических операций
1. Возведение в степень (**)
2. Умножение (*)
3. Деление (/)
4. Целочисленное деление (//)
5. Остаток от деления (%)
6. Сложение (+)
7. Вычитание (-)"""

#Округление числа, можно указать кол-во знаков после запятой
a = 1.3254182737
b = 3.148220497
c = round(a * b, 4)
print(c)

#Сокращенные операции присваивания
iter = 2
iter += 3 # iter = iter + 3
iter -= 4 # iter = iter - 4
iter *= 5 # iter = iter * 5
iter /= 5 # iter = iter / 5
iter //= 5 # iter = iter // 5
iter %= 5 # iter = iter % 5
iter **= 5 # iter = iter ** 5

#Логические операции
"""
Знак операции Операция
> Больше
>= Больше или равно
< Меньше
<= Меньше или равно
== Равно (проверяет, равны ли числа)
!= Не равно (проверяет, не равны ли значения)
not Не (отрицание)
and И (конъюнкция)
or Или (дизъюнкция)"""

a = 1 < 4
print(a)
a = 1 < 4 and 5 > 2
print(a)
a = 1 == 1
print(a)
a = 1 != 1
print(a)
#Можно сравнивать не только числовые значения, но и строки
a = 'qwe'
b = 'qwe'
print(a == b)
#В Python можно использовать тройные и даже четверные неравенства:
a = 1 < 3 < 6 < 10
print(a)

#Управляющие конструкции: if, if-else
'''a = int(input("a = "))
b = int(input("b = "))
if a > b:
    print(a)
else:
    print(b) '''

#else-if → в связке с elif (else if)
'''username = input('Введите имя: ')
if username == 'Маша':
    print('Ура, это же Маша!!')
elif username == 'Марина':
    print('Я так ждала Вас, Марина!')
elif username == 'Ильнар':
    print('Ильнар - топ)')
else:
    print('Привет,', username)'''

#Сложные условия создаются с помощью логических операторов, таких как: and, or, not
'''n = int(input('Введите натуральное число: '))
if n % 2 == 0 and n % 3 == 0:
    print('число кратно 6')
if n % 5 == 0 and n % 3 == 0:
    print('число кратно 15')'''


#Управляющие конструкции: while и вариация while-else
# Цикл позволяет выполнить блок кода, пока условие является верным.
n = 423
summa = 0
while n > 0:
    x = n % 10
    summa += x
    n = n // 10
#Управляющие конструкции: while-else
#Блок else выполняется, когда основное тело цикла перестает работать самостоятельно (не по break)
else:
    print('пожалуй')
    print('хватит')
print(summa)

#На замену break отлично подходит метод флажка.
#Задача: Пользователь вводит число, необходимо найти минимальный делитель данного числа

'''n = int(input())
flag = True
i = 2
while flag:
    if n % i == 0: # если остаток при делении числа n на i равен 0
        flag = False
        print(i)
    elif i > n // 2: # делитель числа не может превышать введенное число, деленное на 2
        print(n)
        flag = False
    i += 1'''

#Цикл for, range
for i in 1, -2, 3, 15, 5:
    print(i)

r = range(5) # 0 1 2 3 4
r = range(2, 5) # 2 3 4
r = range(-5, 0) # ----
r = range(1, 10, 2) # 1 3 5 7
r = range(100, 0, -20) # 100 80 60 40 20
for i in r:
    print(i)

#Можно использовать цикл for() и со строками
for i in 'qwerty':
    print(i)

#Можно использовать вложенные циклы
line = ""
for i in range(5):
    line = ""
    for j in range(5):
        line += "*"
    print(line)

#работа с текстом
text = 'СъЕШЬ ещё этих МяГкИх французских булок'

#Определить количество символов в строке:
print(len(text))

#Проверить наличие символа в строке (in):
print('ещё' in text)

#Функция, которая делает все буквы строки маленькими:
print(text.lower())

#Функция, которая делает все буквы строки большими:
print(text.upper())

#Заменить слово на другое :
print(text.replace('ещё','ЕЩЁ'))

#Срезы
'''Мы представляем строку в виде массива символов. Значит мы можем
обращаться к элементам по индексам.
Отрицательное число в индексе — счёт с конца строки'''

text = 'съешь ещё этих мягких французских булок'
print(text[0]) # c
print(text[1]) # ъ
print(text[len(text)-1]) # к
print(text[-5]) # б
print(text[:]) # съешь ещё этих мягких французских булок
print(text[:2]) # съ
print(text[len(text)-2:]) # ок
print(text[2:9]) # ешь ещё
print(text[6:-18]) # ещё этих мягких
print(text[0:len(text):6]) # сеикакл
print(text[::6]) # сеикакл
text = text[2:9] + text[-5] + text[:2]
print(text)


